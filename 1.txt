checkpoint = {"model_state_dict": '1',  # 神经网络权重状态字典
                              "optimizer_state_dict": '2',  # 优化器状态字典
                              "epoch": '3',
                              "loss": '4'
                              }


    # 查看一个样例
    # (data, label) = train_set[5004]
    # print(type(label))
    # print(label)
    # img = data[0, :, :]
    # print(img.shape)
    # mp.plotbyData(img)


    
    # 查看一批样例
    '''
    dataiter = iter(train_loader)  # 随机迭代
  images, labels = dataiter.next()  # 返回4张图片及标签
   with open('char_dict', 'rb') as f:
        dict = pickle.load(f)
        # 根据值找键
        print(' '.join('%5s' % list(dict.keys())[
            list(dict.values()).index(labels[j])] for j in range(10)))

        result = transforms.ToPILImage()(tv.utils.make_grid(images)).resize((500, 50))
        result.show()
    '''



加载检测点
    # 初始化模型
model = NetSmall()

# 初始化优化器
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

ch_path = 'checkpoint_3_epoch.pkl'
checkpoint = torch.load(ch_path)
model.load_state_dict(checkpoint['model_state_dict'])

# 打印模型的 state_dict
print("Model's state_dict:")
for param_tensor in model.state_dict():
    print(param_tensor, "\t", model.state_dict()[param_tensor].size())
    print(model.state_dict()[param_tensor])